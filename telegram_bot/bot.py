import dotenv, asyncio, os, random
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.enums import ParseMode

project_path = Path.cwd().parent
data_path = project_path / "data"
data_path.mkdir(exist_ok=True)

dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

with open(data_path / "phrases.txt", "r", encoding="utf-8") as file:
    phrases = file.readlines()


@dp.message(Command("start"))
async def start_message(message: types.Message):
    await message.answer(
        text="<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .mp3 –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Ä–µ—á–∏!\n–ù–∞–ø–∏—à–∏ /profile —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!\n–ù–∞–ø–∏—à–∏ /task —á—Ç–æ–±—ã —è –¥–∞–ª —Ç–µ–±–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É",
        parse_mode=ParseMode.HTML
    )


@dp.message(Command("profile"))
async def profile_message(message: types.Message):
    user_id = str(message.from_user.id)

    ...


@dp.message(Command("task"))
async def task_message(message: types.Message):
    await message.answer(
        text=f"<b>–ü—Ä–æ–∏–∑–Ω–µ—Å–∏ —ç—Ç—É —Ñ—Ä–∞–∑—É:</b> {random.choice(phrases)}",
        parse_mode=ParseMode.HTML
    )


async def main():
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(main())